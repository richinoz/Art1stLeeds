@using System.Threading
@model List<ArtSite.Models.PictureItemNoBufferData>
 <script src="../../shadowbox-3.0.3/shadowbox.js" type="text/javascript"></script>
    <link href="../../shadowbox-3.0.3/shadowbox.css" rel="stylesheet" type="text/css" />

    <script type="text/javascript">
        Shadowbox.init({
            handleOversize: "resize",
            displayNav: true,
            handleUnsupported: "remove",
            autoplayMovies: false,
            slideshowDelay: 5,
            overlayOpacity: 0.9,
            onFinish: function () { $('#sb-body-inner img').one('click', Shadowbox.next); }

        });
        
    </script>

    <link href="../../Content/masonryStyle.css" rel="stylesheet" type="text/css" />
    <script src="../../Scripts/Masonry/modernizr-transitions.js" type="text/javascript"></script>
    <script src="../../Scripts/Masonry/jquery-1.6.2.min.js"></script>
    <script src="../../Scripts/Masonry/jquery.masonry.min.js"></script>
  
    <script>
        $(function () {

            var $container = $('#container');

            $container.imagesLoaded(function () {
                $container.masonry({
                    itemSelector: '.box',
                    columnWidth: 20,
                    isAnimated: !Modernizr.csstransitions
                });
            });
        });
    </script>
    
    <span id="output">
     <div id="container" class="transitions-enabled clearfix">
    @{if (Model != null)
      {
          int itemsPerPage = Model.Count;
          HttpCookie httpCookie = Response.Cookies["ImagesPerPage"];

          if (httpCookie != null)
          {
              if (!int.TryParse(httpCookie.Value, out itemsPerPage))
              { itemsPerPage = Model.Count; }
          }

          <br />
          int i = 0;
          var x = (int)ViewBag.StartIndex;
          for (i = x; i < x + itemsPerPage; i++)
          {
              if (Model.Count <= i)
              { break; }
              var item = Model[i];
              var path = "/MyFiles/" + @item.ID + ".jpg";
              var pathSmallImage = "/MyFiles/" + @item.ID + "_s.jpg";
              var title = string.Format("'{0}'", @item.Title ?? "Untitled");
              var info = string.Format("'{0}' by '{1}'\nMedia: {2}\nDimensions: {3}", @item.Title ?? "Untitled", @item.Artist ?? "anon", @item.Media, @item.Size);
              <div class="box">
                <span style=" display:inline-block; vertical-align:bottom; margin-bottom: 5px; margin-left:5px; margin-right:5px;">
               
                    <a href="@path"rel="shadowbox[groupedresults]" title="@info"><img  alt="pic" src="@pathSmallImage" title="@info" onError="this.src='../../images/error.jpg'" 
                            /></a>
                          @*   onload="RetrievePicture(this,'@item.ID');"*@
                    
                    <div style="color:Black;   ">@title</div>
                </span>
               </div>
                
          }
        
                        
       @Html.Raw("<div style='clear:both; float:right; '>")
  if (Model.Count > i)
  {
             @Ajax.ActionLink(" Next", "SearchingContinue", new { index = i }, new AjaxOptions() { UpdateTargetId = "output" })
  }
        @Html.Raw("</div>")     
        
       @Html.Raw("</br><div style='float:right;'>")
  if (i > itemsPerPage)
  {@Ajax.ActionLink("Previous ", "SearchingContinue", new { index = Math.Max(0, i - (2 * itemsPerPage)) }, new AjaxOptions() { UpdateTargetId = "output" })}
       @Html.Raw("</div>")  
                      
      }   
               
    }
    </div>
      </span>
       
